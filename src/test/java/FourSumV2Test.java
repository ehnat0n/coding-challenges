import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

import static org.testng.AssertJUnit.assertEquals;

public class FourSumV2Test {

    @DataProvider(name = "testData")
    public Object[][] createDataObject() {
        return new Object[][]{
                {new int[]{1,2}, new int[]{-2,-1}, new int[]{-1,2}, new int[]{0,2}, 2}, //[example1]
                {new int[]{0},   new int[]{0},     new int[]{0},    new int[]{0},   1}, //[example2]
                {new int[]{-84, 99, 26, -35, 0, -53, -86, 10, 46, -92, -82, 62, 70, 68, -90, -10, 11, -96, -78, 18, 17, -38, 3, 31, 51, -71, -41, 25, 83, -10, -12, -65, 0, 29, 0, -21, -58, 10, -17, -17, -67, -63, -95, -52, 76, 78, -25, -69, -17, 42, -77, 20, -46, 15, -5, 35, -6, 31, 49, 12, -87, -97, 52, 69, -11, 26, -89, -83, 55, -54, -61, 78, 1, -34, -7, 14, 59, 61, 82, 1, -3, 96, -67, -69, 93, -77, 65, 41, 49, 28, -33, 77, -89, 31, -63, -84, 69, 66, 57, -87, -88, 11, 83, -58, 32, -43, -16, -69, 2, -46, 51, 47, -49, 47, 100, -87, -41, 76, 20, -54, 22, -9, 57, -70, 32, 71, 92, 73, 28, 72, 43, -53, -73, 85, -55, -44, -76, 40, 58, 84, -22, 26, -47, 9, -35, -95, 34, 73, -13, 80, -87, 52, -33, -37, 21, -12, -68, 56, 23, 74, -59, 78, -47, 53, 35, 39, -58, -20, -67, -61, -41, 20, -9, 12, -60, -37, 7, 78, -64, 36, -69, -98, 81, 71, -69, 98, 76, 44, -75, -85, 48, 36, -64, 59, -88, -73, -15, 54, -35, 88},
                 new int[]{55, 38, 46, -87, -8, 47, -90, -38, 37, -66, -35, 16, 86, -94, 88, 68, 57, 40, 9, 50, -76, 56, 56, 21, 30, -3, 6, 5, -63, -39, -12, 9, -81, 54, -68, 43, -25, -44, 21, -77, -85, 15, 34, -82, 23, -51, -71, 66, 18, 24, 42, 70, -2, 86, 37, 20, 80, 92, 4, 63, -11, -92, 25, -67, -31, -74, 98, -30, 25, -79, 3, 47, -26, -71, -37, 43, 75, 82, 6, 41, -73, 75, -29, -9, 32, -88, 51, 88, 57, 10, -8, 64, -30, 22, 76, 46, -9, 81, -60, 89, -65, 87, 77, -35, 39, 91, 56, -67, 35, -86, 75, -15, -11, 80, -77, 70, -64, 70, 52, -14, 76, -60, 56, -58, -54, 54, -85, 6, -33, 26, 44, 14, 52, 38, -39, 39, 47, -71, 36, 72, -8, -19, 98, -32, 89, 31, -27, -13, -67, -26, 79, 23, -65, 9, 29, 42, 92, 69, -32, -76, -25, 73, -85, -7, -61, 4, -15, 18, -66, -7, 26, 1, -4, 25, 89, -65, -96, 64, -90, 13, -40, -22, 95, -87, -69, 89, 20, -20, 76, 50, 74, 85, 32, -33, -5, -34, -84, 94, 24, -11},
                 new int[]{-72, 88, -54, -47, 3, -95, -73, 15, 55, 79, -72, -76, -84, 29, -86, -70, 77, -54, 0, -12, -41, -94, -74, -13, 47, 16, 73, 77, -36, 40, -51, -73, -16, 35, 50, 7, -97, 67, 25, 19, 55, 66, 43, 94, -16, -2, -27, -78, 39, 87, 57, 61, -41, 26, 55, -47, 75, 81, 86, 41, -55, -97, 53, -25, -46, 59, 79, 79, -71, -12, 80, 73, -61, 32, 41, 100, 32, 89, 66, -35, -86, 96, 3, 17, 0, -41, 28, 88, 92, 72, -98, -34, 22, 56, 26, -21, 48, -28, -72, 54, -48, -85, 19, -13, 19, -6, -26, -40, 65, -56, 12, 5, -60, -81, -42, -99, -88, 82, 79, -25, -89, -80, 91, -29, -93, -88, 6, -50, 68, 73, -97, 60, 26, -73, -76, -17, -12, 99, 26, -4, 14, 17, 17, -73, -71, 63, 79, 28, -35, 41, -75, -55, 60, -72, -41, -8, 67, 15, -12, -45, -72, 8, 81, 53, -48, 28, -94, -1, -69, 30, 99, 70, -76, 45, -9, -62, -22, -35, 80, 7, 43, 8, 38, -71, 53, 98, -18, 16, -13, -69, -2, -80, 46, 57, 14, 63, 21, -13, -22, -6},
                 new int[]{-13, 59, -34, -34, -73, 98, 87, -35, 14, 1, -17, 23, 74, -88, 37, -68, 44, 76, 7, 5, 7, 20, -22, 15, 28, 37, 27, 38, -25, 20, -85, 52, -78, 4, -57, 58, 94, 16, 28, -24, -90, -22, -57, -17, 67, -8, -99, 86, 48, -11, 74, 38, -3, -74, -12, -36, 19, 81, 38, -85, -49, -66, 71, -81, -13, -59, -73, -1, -28, 56, -100, -1, 100, -53, 39, -27, -79, -91, 44, 26, 68, -72, -83, -30, -27, 12, 30, 4, -90, -75, 70, 16, 50, -58, -34, 62, 66, -9, 14, 6, -89, -84, 100, -53, 26, -29, -6, -30, 22, 30, 50, -47, 21, -95, 1, 33, 65, 33, 55, -51, -48, -33, 10, -27, 51, -75, -98, 27, 32, 19, -10, 59, 40, 59, 73, 87, 35, 27, -57, -25, -9, -29, -71, -80, 35, -36, 20, -91, 75, -54, 89, -14, -58, 33, 55, 46, -38, -37, 46, 6, -69, 30, 8, 32, 3, -98, -60, 32, 2, 68, 83, 49, 36, -81, -94, 8, -93, -24, 43, 60, -43, 26, 93, -100, -24, 10, 20, -38, -78, -90, -42, 100, 43, -9, 16, -31, -97, 18, 58, 76},
                 5429120}, //max capacity
                {new int[]{-15,-30,-2,-18,-30,1,-15,-29,5,-2,8,-8,-10,7,-18,-11,4,-23,0,-23,-13,0,6,-12,-17,8,-16,-28,-24,-8,3,-7,-7,-14,4,-14,-11,-11,-2,8,-20,-9,0,-5,10,-11,-19,8,8,-3,-3,-13,-27,-5,-4,-5,6,-3,-12,-21,-32,10,-20,-18,7,-10,-20,-6,8,6,1,-30,0,3,-10,-9,9,-2,1,5,-22,-25,-16,-15,-31,-1,-12,6,8,-22,-3,-3,5,-21,7,-21,0,-17,-5,-29},
                 new int[]{-22,-19,-32,-6,2,-9,-31,-3,-27,-14,-15,7,-16,-11,5,-29,-31,10,-22,7,1,-19,-14,-8,-3,-23,0,-12,-7,2,-2,-20,2,-15,-6,-7,-22,-24,-20,-5,-7,-1,-22,0,-29,1,-6,-28,-22,-11,-3,-17,7,-24,-21,-12,-32,-7,-14,-21,-16,-27,-30,-26,-6,-12,5,-22,-14,-13,-25,-29,-28,-15,-14,5,-31,-20,-1,-6,-4,-21,-32,-16,-23,-20,-4,-22,9,-11,-17,-2,-32,9,9,2,9,-18,-11,-23},
                 new int[]{6,-15,9,-15,-7,-14,-14,-10,2,-18,-27,8,-9,7,-23,-19,-8,1,-19,2,10,-1,-18,-17,-20,4,-29,-21,-9,5,1,-9,-22,7,-3,-16,-29,-12,-15,-18,-16,-18,8,-30,-6,2,-15,-2,-15,-8,0,-25,-28,-9,-27,-20,-17,-24,-22,-8,-8,4,-14,-31,-27,-1,-27,-3,-9,6,-16,-13,-27,2,-27,-14,4,8,-9,-4,8,6,-18,-14,8,-24,2,-19,1,-31,5,-2,-17,-9,-11,-28,1,-29,3,-24},
                 new int[]{6,-1,7,-21,6,7,-11,-10,10,-10,-25,-20,-31,-26,2,-16,-31,-19,-3,10,-19,-5,4,-17,-16,-10,-31,-20,-24,-24,-27,-24,-24,-16,10,-20,-24,1,-4,-25,-8,-6,-15,-3,-24,-6,-31,-25,4,-31,-15,-13,-12,-17,-3,-27,-32,3,-10,-7,-4,8,-4,1,4,-15,-2,-8,6,3,-14,-30,-10,-30,-15,-22,3,6,-20,6,7,-27,2,-15,-10,0,-1,-7,-13,9,-20,5,-15,-5,-11,-21,6,-7,2,-17},
                 387027} //high capacity
        };
    }

    @Test(dataProvider = "testData")
    public void testSolution(int[] nums1, int[] nums2, int[] nums3, int[] nums4, int expected) {
        long startTime = System.nanoTime();
        int result = new FourSumV2().fourSumCount(nums1, nums2, nums3, nums4);
        long endTime = System.nanoTime();
        System.out.println("Solution run time: " + (endTime - startTime) / 1000000d + " milliseconds.");
        assertEquals(expected, result);
    }
}
